import os
import sys
import rtconfig

if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.normpath(os.getcwd() + '/../..')

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

TARGET = 'rtthread-beaglebone.' + rtconfig.TARGET_EXT

#SetOption('experimental','ninja')
DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw'],
	AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
	CC = rtconfig.CC, CFLAGS = rtconfig.CFLAGS,
	CXX= rtconfig.CXX, CXXFLAGS = rtconfig.CFLAGS,
	AR = rtconfig.AR, ARFLAGS = '-rc',
	LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
env.Tool('ninja')

Export('RTT_ROOT')
Export('rtconfig')

def ExpandList(l, expandList = []):
    for x in l:
        if type(x) != list:
            expandList.append(x)
        else:
            ExpandList(x)
    return expandList

# prepare building environment
objs = ExpandList(PrepareBuilding(env, RTT_ROOT))

def GenIncPathsFile(env, objs):
    incPathsFile = "build/__cpp_path.txt"
    cppPathStr = "-I" + "\n-I".join(env["CPPPATH"]).replace("\\", "/")
    compileIncPath = os.path.normpath(os.path.join(rtconfig.EXEC_PATH, "..", "include"))
    def WriteIncPathsFile(target, source, env):
        f = open(str(target[0]), "w" , encoding = "utf-8")
        f.write("-I%s\n" % (os.path.join(compileIncPath, "libcxx").replace("\\", "/")))
        f.write("-I%s\n" % (compileIncPath.replace("\\", "/")))
        f.write(cppPathStr)
        f.close()
    env.Command(
        incPathsFile,
        None,
        WriteIncPathsFile
    )

    env.Depends(objs, [incPathsFile])
    return incPathsFile

incPathsFile = GenIncPathsFile(env, objs)
env["_CPPINCFLAGS"] = "@%s" % (incPathsFile)

# make a building
DoBuilding(TARGET, objs)
