Import('RTT_ROOT')
Import('rtconfig')
from building import *

src = Glob('*.c')

CPPPATH = [RTT_ROOT + '/include']

if GetDepend('RT_USING_SMALL_MEM') == False:
    SrcRemove(src, ['mem.c'])

if GetDepend('RT_USING_SLAB') == False:
    SrcRemove(src, ['slab.c'])

if GetDepend('RT_USING_MEMPOOL') == False:
    SrcRemove(src, ['mempool.c'])

if GetDepend('RT_USING_MEMHEAP') == False:
    SrcRemove(src, ['memheap.c'])

if GetDepend('RT_USING_SIGNALS') == False:
    SrcRemove(src, ['signal.c'])

if GetDepend('RT_USING_DEVICE') == False:
    SrcRemove(src, ['device.c'])

if GetDepend('RT_USING_SMP') == False:
    SrcRemove(src, ['cpu.c'])

CPPDEFINES = ['__RTTHREAD__']

group = DefineGroup('Kernel', src, depend = [''], CPPPATH = CPPPATH, CPPDEFINES = CPPDEFINES)

TsPy = Glob("**/*_Ts.py")

cwd = os.path.normpath(GetCurrentDir())
for ts in TsPy:
    target = "%s.autogen.cpp" % str(ts)[:-6]
    basename = os.path.basename(target)
    relPathTarget = os.path.relpath(target, cwd)
    Env.Command(
        target,
        ts,
        "cd ${SOURCE.srcpath.dir.abspath} && python ${SOURCE.file} --output=${TARGET.abspath}"
    )
    Env.Depends(os.path.join(Dir(".").abspath, os.path.splitext(basename)[0], ".o"), File(target))
    group = [File(relPathTarget)] + group

Return('group')
